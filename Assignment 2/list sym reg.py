import csv
import random
import operator
import math
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm

# Node Class
class Node:
    def __init__(self, function=None, terminal=None):
        self.function = function
        self.terminal = terminal
        self.left = None
        self.right = None

    def evaluate(self, x):
        if self.function:
            if self.right:  # Binary operators
                return self.function(self.left.evaluate(x), self.right.evaluate(x))
            return self.function(self.left.evaluate(x))  # Unary operators
        return self.terminal if self.terminal != 'x' else x
    def __str__(self):
        if self.function == operator.add:
            return f"({str(self.left)} + {str(self.right)})"
        elif self.function == operator.sub:
            return f"({str(self.left)} - {str(self.right)})"
        elif self.function == operator.mul:
            return f"({str(self.left)} * {str(self.right)})"
        elif self.function == operator.truediv:
            return f"({str(self.left)} / {str(self.right)})"
        elif self.function == math.sin:
            return f"sin({str(self.left)})"
        elif self.function == math.cos:
            return f"cos({str(self.left)})"
        else:
            return str(self.terminal)

# Functions and Terminals
FUNCTIONS = [(operator.add, 2), (operator.sub, 2), (operator.mul, 2), (operator.truediv, 2), (math.sin, 1),
             (math.cos, 1)]
TERMINALS = [str(i) for i in range(-10, 11)] + ['x']


def random_expression(depth=3):
    if depth == 0 or (not depth and random.random() < 0.5):
        return Node(terminal=random.choice(TERMINALS))

    func, arity = random.choice(FUNCTIONS)
    node = Node(function=func)
    node.left = random_expression(depth - 1)
    if arity == 2:
        node.right = random_expression(depth - 1)
    return node


def fitness(expression, data):
    error = 0.0
    for x, y in data:
        try:
            prediction = expression.evaluate(x)
            error += (prediction - y) ** 2
        except:
            error += float('inf')
    return error


def symbolic_regression(data, generations=1000, population_size=100):
    population = [random_expression() for _ in range(population_size)]
    fitness_scores = [fitness(expr, data) for expr in population]

    fitness_history = []

    for _ in tqdm(range(generations)):
        # Replace half of the population with new random expressions
        for i in range(population_size // 2):
            new_expr = random_expression()
            new_fitness = fitness(new_expr, data)

            # Find the index of the maximum fitness score
            max_fitness_idx = fitness_scores.index(max(fitness_scores))

            # Replace if new expression's fitness is better
            if new_fitness < fitness_scores[max_fitness_idx]:
                population[max_fitness_idx] = new_expr
                fitness_scores[max_fitness_idx] = new_fitness

        fitness_history.append(min(fitness_scores))

    best_expression = population[fitness_scores.index(min(fitness_scores))]
    return best_expression, fitness_history


# Sample data
data = [(i, i ** 2) for i in range(10)]
csv_file_path = 'data.csv'

data = []
with open(csv_file_path, 'r') as file:
    csv_reader = csv.reader(file)
    for row in csv_reader:
        data.append([float(row[0]), float(row[1])])

best_expression, fitness_history = symbolic_regression(data, generations=1)
plt.plot(range(len(fitness_history)), fitness_history)
fitness_history = [159230, 159230, 159230, 159230.0367167175, 159230.0367167175, 159230.0367167175, 159230.0367167175, 159230.0367167175, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 151498.8565810196, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478, 150257.71112086478]

std = np.std(fitness_history)
plt.errorbar(range(len(fitness_history)), fitness_history, yerr=[std if i % 200 == 0 else 0 for i in range(len(fitness_history))], color='blue', linestyle='-',fmt='|', ms=1,mew=1,capthick=2,capsize=5)
print(best_expression)
print(fitness_history)
# Plotting


# x, y = zip(*data)
# # Create a scatter plot
# plt.scatter(x, y, label='Points', color='blue', marker='o')

# x = np.linspace(0,10,1000)
# y = []
# for i in x:
#     y.append(math.sin(math.sin(math.cos(i))))
#
# plt.plot(x, y, label='Data Line', color='red', marker='', linestyle='-')

plt.xlabel('Iterations')
plt.ylabel('Fitness')
plt.title('Fitness over iterations')
plt.show()